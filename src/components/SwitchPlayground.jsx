import React, { useState } from "react";
import { token } from "../../styled-system/tokens";
import { css } from "../../styled-system/css";
import { styled } from "../../styled-system/jsx";

import {
  Shape,
  Parameters,
  BoxOption,
  Circle,
  ContentExample,
  RadioGroupItem,
  RadioGroupRoot,
  Divider,
  Letter,
} from "./styles";

const backgrounds = ["grey", "beige", "green", "black"];
const fonts = ["Inter", "Novela"];
const fontSizes = ["small", "medium", "large"];

const SwitchPlayground = () => {
  const [size, setSize] = useState("medium");
  const [background, setBackground] = useState("black");
  const [fontFamily, setFontFamily] = useState("Inter");
  const isDark = background === "black" || background === "green";

  return (
    <Shape size={size} background={background} textColor={background}>
      <ContentExample fontFamily={fontFamily}>
        <h1>Customization</h1>
        <p>Create a look and feel that suits your personal preferences.</p>
      </ContentExample>

      <Parameters background={background}>
        <div>
          <RadioGroupRoot
            defaultValue="size"
            aria-label="Font size selector"
            display="flex"
            gap="1.3rem"
            padding="1rem"
          >
            {fontSizes.map((fontSize, idx) => {
              return (
                <Option
                  key={idx}
                  id="color"
                  size={fontSize}
                  isDark={isDark}
                  letter="A"
                  isSelected={fontSize == size}
                  onClick={() => setSize(fontSize)}
                />
              );
            })}
          </RadioGroupRoot>
        </div>
        <Divider theme={isDark ? "white" : "black"} />
        <div>
          <RadioGroupRoot
            defaultValue="color"
            aria-label="Color selector"
            display="flex"
            gap="1.3rem"
            padding="1rem"
          >
            {backgrounds.map((light, idx) => {
              return (
                <Option
                  key={idx}
                  id="background"
                  background={light}
                  isDark={isDark}
                  isSelected={background == light}
                  onClick={() => setBackground(light)}
                />
              );
            })}
          </RadioGroupRoot>
        </div>
        <Divider theme={isDark ? "white" : "black"} />
        <styled.div display="flex" padding="0.5rem">
          <RadioGroupRoot
            defaultValue="text"
            aria-label="Text selector"
            display="flex"
            gap="0.7rem"
            padding="1rem 0"
          >
            {fonts.map((font, idx) => {
              return (
                <TextOption
                  key={idx}
                  id="fonts"
                  isDark={isDark}
                  isSelected={fontFamily == font}
                  value={font}
                  background={background}
                  onClick={() => setFontFamily(font)}
                />
              );
            })}
          </RadioGroupRoot>
        </styled.div>
      </Parameters>
    </Shape>
  );
};

const Option = ({
  isSelected,
  id,
  onClick,
  isDark,
  size,
  background,
  letter,
}) => {
  return (
    <BoxOption background={background} onClick={onClick}>
      {letter && (
        <Letter
          opacity={isSelected ? "1" : "0.3"}
          _hover={{ opacity: 1 }}
          size={size}
        >
          {letter}
        </Letter>
      )}
      {isSelected && (
        <Circle
          layoutId={id}
          border={isDark ? "white" : "dark"}
          initial={false}
          transition={{
            duration: 0.6,
            type: "spring",
          }}
        />
      )}
    </BoxOption>
  );
};

const TextOption = ({ isSelected, id, onClick, isDark, value }) => {
  return (
    <RadioGroupItem
      margin="0"
      position="relative"
      display="flex"
      alignItems="center"
      justifyContent="center"
      cursor="pointer"
      padding="4px 16px"
      style={{
        // The token() function is generated by Panda and contains an object of all tokens by dot-path,
        // allowing you to query for token's raw value at runtime.
        // see: https://panda-css.com/docs/guides/dynamic-styling#using-token
        "--font-family": token(`fonts.${value}`),
      }}
      onClick={onClick}
    >
      <styled.span
        opacity={isSelected ? "1" : "0.3"}
        fontFamily="var(--font-family)"
        _hover={{ opacity: 1 }}
      >
        {value}
      </styled.span>
      {isSelected && (
        <Circle
          layoutId={id}
          initial={false}
          border={isDark ? "white" : "dark"}
          radius="small"
          transition={{
            duration: 0.6,
            type: "spring",
          }}
        />
      )}
    </RadioGroupItem>
  );
};

export default SwitchPlayground;
